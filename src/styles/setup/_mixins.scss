@use "sass:map";

/* Media queries Breakpoint mixins */
@mixin for-mobile-layout {
  @media (max-width: $break-mobile) {
    //580
    @content;
  }
}

@mixin for-narrow-layout {
  @media (min-width: $break-narrow) {
    //1024
    @content;
  }
}

@mixin for-normal-layout {
  @media (min-width: $break-normal) {
    //1300
    @content;
  }
}

@mixin for-wide-layout {
  @media (min-width: $break-wide) {
    //1500
    @content;
  }
}

@mixin for-ultra-wide-layout {
  @media (min-width: 1800px) {
    //800
    @content;
  }
}

@mixin layoutGTC($max) {
  grid-template-columns:
    minmax($layoutPadding, 1fr) minmax(auto, $max) minmax($layoutPadding, 1fr);
}

/* Media  Mixins */

//aspect ratio mixin
@mixin aspect-ratio($width: 1, $height: 1) {
  position: relative;
  overflow: hidden;

  &:before {
    content: '';
    display: block;
    width: 100%;
    padding-top: calc($height / $width) * 100%;
  }

  >* {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  >img {
    height: 100%;
    object-fit: cover;
  }
}

// Mixin for removing hover efects on iphone screen
@mixin hover-supported {
  @media not all and (pointer: coarse) {
    &:hover {
      @content;
    }
  }
}

@mixin horizontal-dash($color: black, $dash: 10px, $space: 5px, $position: top) {
  content: "";
  width: 100%;
  height: 100%;
  background-image: linear-gradient(to right, $color 50%, rgba(255, 255, 255, 0) 0%);
  background-size: $dash $space;
  background-repeat: repeat-x;
  position: absolute;
  background-position: $position;
  top: 0;
  left: 0;
}

@mixin vertical-dash($color: black, $dash: 10px, $space: 5px, $position: right) {
  content: "";
  width: 100%;
  height: 100%;
  background-image: linear-gradient($color 50%, rgba(255, 255, 255, 0) 0%);
  background-size: $space $dash;
  background-repeat: repeat-y;
  position: absolute;
  background-position: $position;

  top: 0;
  left: 0;
}

// Label{

@mixin label {
  display: inline-flex;
  align-items: center;
  border-radius: 3px;
  color: $light-color1;
}

@mixin media($keys...) {
  @each $key in $keys {
    @media (min-width: map-get($breakpoints, $key)) {
      @content;
    }
  }
}

@mixin transparent($color: black) {
  border: none;
  background-color: transparent;
  outline: none;
  color: $color;
}

@mixin round($width) {
  width: $width;
  height: $width;
  border-radius: 50%;
}

@mixin pill() {
  border-radius: 999px;
}

@mixin menu-item() {
  height: 30px;
  width: fit-content;
  @include pill();
  cursor: pointer;
  color: $text-black;
  font-size: rem(14px);

  @include hover-supported() {
    &:not(.selected) {
      background-color: $bg-semi-blue;
      color: $element-blue;
    }
  }

  &.selected {
    color: $element-blue;
    background-color: $bg-selected-blue;
  }
}

@mixin round-btn() {
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  background-color: inherit;
  border: none;

  @include hover-supported() {
    background-color: $button-hover-bg;
  }
}

// Buttons

// @mixin btn(
//   $type: regular,
//   $bg: $primary-color,
//   $clr: $light-color1,
//   $padding: em(16px) em(22px),
//   $hover: darken($bg, 8%)
// ) {
//   display: inline-flex;
//   align-items: center;
//   text-decoration: none;
//   text-transform: uppercase;
//   padding: $padding;
//   line-height: 1.25;
//   font-size: em(14px);
//   font-variation-settings: 'wght' 430;
//   border-radius: 6px;
//   border: none;
//   cursor: pointer;

//   transition: background-color 0.2s;

//   @if $type == regular {
//     background-color: $bg;
//     color: $clr;
//     &:hover {
//       background-color: $hover;
//     }
//   } @else if $type == dark {
//     background-color: $dark-color1;
//     color: $light-color1;
//     &:hover {
//       background-color: $primary-color;
//       color: $light-color1;
//     }
//   } @else if $type == light {
//     background-color: $light-color2;
//     color: $dark-color1;
//     &:hover {
//       background-color: $primary-color;
//       color: $light-color1;
//     }
//   }
// }

// Type

@mixin type($type: bold) {

  // type options:
  // 1.bold
  // 2.boldCondensed
  // 3.condensed
  @if $type ==bold {
    font-variation-settings: 'wght' 430;
  }

  @else if $type ==boldCondensed {
    font-variation-settings: 'wght' 430, 'wdth' 80;
    letter-spacing: em(1.5px);
  }

  @else if $type ==condensed {
    font-variation-settings: 'wdth' 80;
    letter-spacing: em(6.72px);
  }

  @else if $type ==light {
    font-variation-settings: 'wght' 200;
  }
}

@mixin positions {
  @each $position in $positions {
    .#{$position} {
      position: $position;

      &.center:not(.flex) {
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
      }
    }
  }
}

@mixin displays {
  @each $display in $displays {
    .#{$display} {
      display: $display;
    }
  }
}

@mixin spacing {
  @for $i from 0 through 40 {
    .p {
      &a-#{$i} {
        padding: rem(calc((1px) * $i));
      }

      @each $ref,
      $val in $reference-map {
        &#{$ref}-#{$i} {
          padding-#{$val}: rem(calc((1px) * $i));
        }
      }
    }

    .m {
      &a-#{$i} {
        margin: rem(calc((1px) * $i));
      }

      @each $ref,
      $val in $reference-map {
        &#{$ref}-#{$i} {
          margin-#{$val}: rem(calc((1px) * $i));
        }
      }

    }

    .gap {
      &-#{$i} {
        gap: rem(calc((1px) * $i));
      }
    }
  }

  .p {
    &a-auto {
      padding: auto;
    }

    @each $ref,
    $val in $reference-map {
      &#{$ref}-auto {
        padding-#{$val}: auto;
      }
    }

  }

  .m {
    &a-auto {
      margin: auto;
    }

    @each $ref,
    $val in $reference-map {
      &#{$ref}-auto {
        margin-#{$val}: auto;
      }
    }
  }
}

@mixin font-weight-x {
  @for $i from 1 through 7 {
    .fw-#{$i}00 {
      font-weight: calc(100 * $i);
    }
  }
}

@mixin font-size-px {
  @for $i from 4 through 48 {
    .fs-#{$i}-px {
      font-size: rem(calc(1px * $i));
    }
  }
}

@mixin font-size-rem {
  @for $i from 1 through 100 {
    .fs-0#{$i}-rem {
      font-size: calc(1rem * $i / 100);
    }
  }

  @for $i from 100 through 300 {
    .fs-#{$i}-rem {
      font-size: calc(1rem * $i / 100);
    }
  }
}

@mixin flex {
  .flex {
    @for $i from 1 through 9 {
      &-shrink-#{$i} {
        flex-shrink: $i;
      }

      &-grow-#{$i} {
        flex-grow: $i
      }
    }

    &.center {
      justify-content: center;
      align-items: center;
    }
  }

  @each $alignment in $alignments {
    .items-#{$alignment} {
      align-items: $alignment;
    }

    .justify-#{$alignment} {
      justify-content: $alignment;
    }

    .self-#{$alignment} {
      align-self: $alignment;
    }
  }

  @each $space in $flex-spacing {
    .justify-#{$space} {
      justify-content: space-#{$space};
    }
  }
}

@mixin z-index {
  .z {
    @for $i from 0 through 50 {
      &-#{$i} {
        z-index: calc(10 * $i);
      }
    }
  }
}

@mixin size {
  .scale {
    @for $i from 1 through 200 {
      &-#{$i} {
        transform: scale(calc($i / 100));
      }
    }
  }

  @for $i from 0 through 100 {
    .w-#{$i} {
      width: $i*1%;
    }

    .h-#{$i} {
      height: $i*1%;
    }
  }

  @each $fit in $content-fit {
    .w-#{$fit} {
      width: $fit+(-content)
    }

    .h-#{$fit} {
      height: $fit+(-content)
    }
  }

  @each $overflow in $overflows {
    .of-#{$overflow} {
      overflow: $overflow;
    }

    .of-x-#{$overflow} {
      overflow-x: $overflow;
    }

    .of-y-#{$overflow} {
      overflow-y: $overflow;
    }
  }
}

@mixin transform {
  @for $i from 0 through 360 {
    .rotate-#{$i} {
      rotate: (calc($i * .01turn));
      &-deg{
        rotate: $i*1deg
      }
    }
  }
}

@mixin palette {

  @each $name,
  $shades in $palette-map {

    @each $shade-key,
    $shade-val in $shades {
      .#{$name}-#{$shade-key} {
        &:not(.background) {
          color: $shade-val;
        }

        &.fill {
          fill: $shade-val;
        }

        &.background {
          background-color: $shade-val;
        }

        &.border {
          border-color: $shade-val;
        }
      }
    }
  }
}